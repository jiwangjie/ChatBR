{"bug_id": "11587", "title": "Bug 11587BIDI:Java editor and Text editor: User Interface issues.", "description": "Problem was found in Eclipse R2, build 20020214.User Interface IssuesThe UI issues can be divided in 3 categories: no setting of the keyboard language when needed bad positioning of the caret no visual feedback for boundary conditionThey apply to both the Java and the Text editors.1. No setting of keyboard language after some operationsThere are a number of cases where the keyboard language should be set, and thisdoes not happen.1a) After removing a character with Del, the keyboard language must be setcorresponding to the removed character (like it happens after skipping acharacter with Left or Right arrows).1b) After removing a character with Backspace, the keyboard language must be setcorresponding to the removed character (like it happens after skipping acharacter with Left or Right arrows).1c) After skipping to the next or previous word (using Ctrl+Right/Left arrow),the keyboard language must be set corresponding to the first character of theword.2. Bad caret positioning after some operationsThere are a number of cases where the caret is not positioned where it should.2a) When typing dataRule: after typing a character, the caret must be adjacent to the last typedcharacter.On an empty line, typeDEF123This is displayed (correctly)123FEDNote that while typing the number, the caret is displayed (correctly) on theright side of the last digit entered.Now start with a line containingabcxyzPut the cursor between c and x, typeDEF123displayingabc123FEDxyzThe caret behaves like before (this is good).Now start with a line containingDEFGHIIt is displayed (correctly)IHGFEDPut the caret between G and F, type123The caret behaves differently: it always appear on the left side of the leftmostdigit.It should appear as before, on the right side of the last digit entered.2b) After Right arrowRule: after pressing left or right arrow, the caret must be adjacent to thecharacter skipped, after it for Right arrow, before it for Left arrow.Notethat after is on the right side for a character in a LTR segment and on the leftside for a character in a RTL segment; before is on the left side for acharacter in a LTR segment and on the right side for a character in a RTLsegment.Start with a line containingabcDEFGhiJKL123MNO456xyzdisplayed asabcGFEDhi456ONM123LKJxyzStart from the home position, and press Right arrow repeatedly.The rule isrespected, except after skipping over L: the caret should stand on the left side of L, but itstands on the left side of 1 after skipping over 3: the caret should stand on the right side of 3, but itstands on the right side of MNote that Left arrow conforms to the rule in all cases.2c) After BackspaceRule: after pressing Backspace, the caret must stand at the location of theremoved character.Start with a line containingabcDEFGhiJKL123MNO456xyzdisplayed asabcGFEDhi456ONM123LKJxyzCase 1: Put the caret between x and y, press Backspace: the x is removed and thecaret stands to the left of y (correct).Press Backspace again: 6 is removed (correct), but the caret still stands to theleft of y; it should stand to the right of 5.Case 2: Put the caret between 4 and 5, press Backspace: the 4 is removed and thecaret stands to the left of 5 (correct).Press Backspace again: O is removed (correct), but the caret still stands to theleft of 5; it should stand to the left of N.Case 3: put the caret between M and N, press Backspace: the M is removed and thecaret stands to the right of N (correct).Press Backspace again: the 3 is removed (correct), but the caret still stands tothe right of N; it should stand to the right of 2.2d) After DelRule: after pressing Del, the caret must stand at the location of the removedcharacter.Start with a line containingabcDEFGhiJKL123MNO456xyzdisplayed asabcGFEDhi456ONM123LKJxyzCase 1: Put the caret between K and L, press Del: the L is removed (correct) butthe caret stands on the left of 1; it should stand on the left of K.Case 2: Put the caret between 2 and 3, press Del: the 3 is removed (correct) butthe caret stands on the right of M; it should stand on the right of 2.Case 3: Put the caret between 5 and 6, press Del; the 6 is removed and the caretstands on the right of 5 (correct).Press Del again: the x is removed (correct), but the caret still stands to theright of 5; it should stand to the left of y.2e) After Next/Previous WordRule: after skipping to the Next or Previous word (using Ctrl+Right/Left arrow),the caret should precede the first logical character of the word.Start with a line containingabc def GHI JKL MNO pqr studisplayed asabcdef ONM LKJ IHG pqr stuWhen starting on the left and pressing Ctrl+Right arrow repeatedly, the caretshould stop on the left of d, then on the right of G, then on the right of J,then on the right of M, then on the left of p, then on the left of s.When starting on the right and pressing Ctrl+Left repeatedly, the caret shouldstop at the same positions in reverse order.Practically, Ctrl+Left behaves as required, but Ctrl+Right misbehaves at thetransition from a LTR word to a RTL word: stops on the left of O instead of theright of G.3. No visual feedback for boundary conditionWhen the caret position is remote from the next logical character, some visualindication should be given.Example:a line containsabcxyzwhich is displayedabcxyzPut the caret between c and x and type DEF,the data is nowabcDEFxyzdisplayedabcFEDxyz, and the caret stands to the left of F, while the nextlogical character (the one which will be deleted if we press Del) is x, which isvisually remote from the caret position.We call that a boundary condition.It is useful to provide the user with an indication of boundary conditions: thiscould be done using the shape of the caret, its color, its blinking rate, or anyother method (Java LayoutText widget displays 2 carets on boundary condition)."}