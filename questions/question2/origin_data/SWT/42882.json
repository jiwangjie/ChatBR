{"bug_id": "42882", "title": "Bug 42882remove platform code throwing ClassNotFound exception", "description": "Add a Platform class in a common platform specific folder with the Platformname. This change will benefit JavaWebStart apps using the lazy flag.from the newsgroup:I've run into an obstacle while deploying SWT through Java web start.The problem I'm experiencing is related to Library.getPlatform() inorg.eclipse.swt.internal.The swt.jar is downloaded eagerly (ie. before the application starts) bythe JNLP client, while other jars should be lazily downloaded (ie. afterthe application starts and when the jar is needed by the application).Here's a sample JNLP file:<jnlp<resource<jar href=\"AAA.jar\" part=\"startup\" download=\"eager\"/<jar href=\"BBB.jar\" part=\"app\" download=\"lazy\"/....</resource<resource os=\"Windows\"<nativelib href=\"winswt/wincorelibs.jar\" part=\"startup\"download=\"eager\"/<jar href=\"winswt/swt.jar\" part=\"startup\" download=\"eager\"/</resource</jnlpIn an attempt to locate missing classes, Java Webstart will download alljars listed in the JNLP file when a particular class is not in thecurrent classpath of the application, regardless of the download=lazyattribute.In my scenario, org.eclipse.swt.internal.motif.OS does notexist in the classpath (I'm using Windows SWT) and thus causes thedownload of every jar file.In Display.getPlatform(), the following piece of code exists:String [] names = new String [] {\"motif\", \"gtk\", \"win32\", \"photon\",\"carbon\"};for (int i = 0; i < names.length; i++) {try {Class.forName(\"org.eclipse.swt.internal.\"+names[i]+\".OS\");return names[i];} catch (ClassNotFoundException e) {}}return \"unknown\";The class org.eclipse.swt.internal.motif.OS will never exist in WindowsSWT.Thus, Class.forName() will always trigger aClassNotFoundException, causing webstart to download everything.I'm suggesting that the following be added to correct this problem.Other suggestions would be much appreciated.if (System.getProperty(\"swt.platform.type\") != null){return (System.getProperty(\"swt.platform.type\"));}else{String [] names = new String [] {\"motif\", \"gtk\", \"win32\", \"photon\",\"carbon\"};for (int i = 0; i < names.length; i++) {try {Class.forName(\"org.eclipse.swt.internal.\"+names[i]+\".OS\");return names[i];} catch (ClassNotFoundException e) {}}return (\"unknown\");}"}