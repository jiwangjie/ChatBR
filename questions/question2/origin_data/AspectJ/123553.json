{"bug_id": "123553", "title": "Bug 123553Can't use named pointcut in advice decl. in generic aspect", "description": "When defining a generic aspect with a paramterized PC, using that PC in an advice declaration causes an 'incompatible type' error. Example:public abstract aspect GenericAspect<Par1 {abstract pointcut checkpoint(Par1 par1);// advice declaration causes errorafter(Par1 par1): checkpoint(par1) {// do something}}Using 1.3.0.20051220093604 and AspectJ 1.5.0, the compiler complains:\"incompatible type, expected java.lang.Object found BindingTypePattern(TPar1;, 0).Check the type specified in your pointcut\"Since it is possible to paramterize a named PC in subaspects:public abstract aspect GenericAspect<Par1 {abstract pointcut checkpoint(Par1 par1);}public aspect SubAspect1 extends GenericAspect<Main{pointcut checkpoint(Main main): call(void Main.test()) && target(main);after (Main main): checkpoint(main) {System.out.println(\"Caught by 1.\");}}public aspect SubAspect2 extends GenericAspect<Main2{pointcut checkpoint(Main2 main): call(void Main2.test()) && target(main);after (Main2 main): checkpoint(main) {System.out.println(\"Caught by 2.\");}}... and since it is possible to use generic PC utilizing unnamed PCs in a generic aspect:public abstract aspect GenericAspect<Par1 {// worksafter(Par1 par1): call(void Par1.test()) && target(par1) {// something }}... it seems that this is a bug."}