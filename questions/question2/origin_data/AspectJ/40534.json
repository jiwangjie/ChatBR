{"bug_id": "40534", "title": "Bug 40534Declare warning/error output  more detail required.", "description": "At present the declare warning and declare error functionality of the compilerprovides no detailed information about what it is in the user code that has ledto the generation of the compiletime warning or error.Consider the following test case...public class A{public static void main(String[] args){A a = new A();a.doSomething();System.out.println(\"All done\");}void doSomething(){System.out.println(\"Doing something\");}} // end of class Apublic aspect MyAspect{pointcut noDoing() :call( .doSomething(..));declare warning : noDoing() :\"Don't do it!\";}When I compile these two files I get the following warning ...c:\\src\\A.java:16 Don't do it!..which is great if all I want to know is where the offending code is. But notnearly enough if I want to know what it is on the line that is contravening thepolicy (or policies) that I have specified in my aspect. In the above example itwould be even more useful if the warning message was something like ...c:\\src\\A.java:16 Don't do it! : calling method : void A.doSomething()For large projects where there is an architectural imperative to reduce orcompletely remove coupling between certain components declare warning/errorwould be of far greater use if it could return more detailed info to say whynot just where the desired enforcement rules have been broken."}