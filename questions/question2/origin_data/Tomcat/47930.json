{"bug_id": "47930", "title": "Bug 47930PersistentManager (using filestore) can return different session objects linked to the same session ID, when Tomcat is restarted", "description": "Created attachment 24333 [details]Sample webapp and scripts to reproduce issueWhen using PersistentManager with a filestore backing, I've noticed that (near)simultaneous requests with the same session ID, can cause PersistentManager toreturn two different session objects, shortly after restarting Tomcat.I have included a sample webapp, with a test script to create simultaneous HTTPrequests to a servlet, that reproduces this issue.General steps to reproduce:0. Configure PersistentManager to use FileStore.<Manager className=\"org.apache.catalina.session.PersistentManager\" <Store className=\"org.apache.catalina.session.FileStore\"directory=\"/tmp\" </Store</Manager1. Make a HTTP request to a servlet, and establish a new session. Note the newsession ID created on the server.2. Restart Tomcat (cleanly shutdown and startup).3. Shortly after Tomcat starts and initialises, make near simultaneous HTTPrequests to a servlet using the previously established session cookie.4. Output the session IDs and session object hashcodes on the server side, thatis associated with each request.5. Some of the reported session object hashcodes will be different (even thoughtheir session IDs are the same). Additionally the HttpSessionListener willreport that the additional sessions are created/destroyed.Expected results:Session object hashcodes should be the same for the requests (and have the samesession ID).Notes on the included attachment: sessionTest.zip contains a sample webapp with two servlets. The LoginServletestablishes a new session for a request. The TestServlet will use the sessioncookie attached to a request, and will retrieve the session object (printingits ID and hexencoded object hashcode).SessionListener will log each time a session is created or destroyed. The sessiontest.sh script will automatically start/shutdown Tomcat, and makeHTTP requests using curl. You may have to change the location of TOMCATHOME,the URL of the deployed webapp, and the COOKIE path. Using the sample webapp and script will not always reproduce the issue. Itmay take a few goes for it to reproduce it.Example output:[tomcat@localhost sessionTest]$ ./sessiontest.shStarting Tomcat..Logging in to init new session..New sessiond ID: JSESSIONID=09DDD0198C190E3394C19808DD8E074ANew session obj hashcode: 3e5e9db7Shutting down Tomcat..Starting Tomcat..Session ID: JSESSIONID=09DDD0198C190E3394C19808DD8E074ASession obj hashcode: 46bb05deSession ID: JSESSIONID=09DDD0198C190E3394C19808DD8E074ASession obj hashcode: 46bb05deSession ID: JSESSIONID=09DDD0198C190E3394C19808DD8E074ASession obj hashcode: 68acbd3aSession ID: JSESSIONID=09DDD0198C190E3394C19808DD8E074ASession obj hashcode: 46bb05deSession ID: JSESSIONID=09DDD0198C190E3394C19808DD8E074ASession obj hashcode: 24bb6086Session ID: JSESSIONID=09DDD0198C190E3394C19808DD8E074ASession obj hashcode: 24bb6086Removing cookie /tmp/foo.cookieShutting down Tomcat..Notice that we have three different session objects tied to the same sessionID, after the requests are made (with hashcodes: 46bb05de, 68acbd3a, 24bb6086)."}