{"bug_id": "44389", "title": "Bug 44389Cleanup of org.apache.naming.resources.CacheEntry resources (memory leak)", "description": "Hi,I am memory profiling a webapp for my company because we suspect it hasmemory leaks when redeploying. This webapp has to be redeployed several times aweek for security reasons (most of the time it is undeployed) and the memoryleaks forced us to shutdown tomcat once a week to avoid OOM exception.I'm using jvm1.5 and tomcat 6.0.13 (also tried with 6.0.14 and today with6.0.16), and Yourkit as the profiling tool. I have made the test in both linuxand windows.I have created a JMeter test to deploy the app using the manager, make somerequest to the app and then undeploy it using again the manager app in a loop.After some redeployments, I got my OutOfMemoryException. Then I checked with myprofiling tool and found that my own classes were correctly destroyed, and theclasses retaining more memory were these ones (listed as a heirarchy):org.apache.catalina.core.ApplicationContext$DispatchDataorg.apache.catalina.core.ApplicationContextmapper oforg.apache.catalina.core.StandardContextcontext oforg.apache.tomcat.util.http.mapper.Mapperresources oforg.apache.tomcat.util.http.mapper.Mapper$Contextcache oforg.apache.naming.resources.ProxyDirContextcache oforg.apache.naming.resources.ResourceCacheorg.apache.naming.resources.CacheEntry[]The number of objects of each class were exactly the number of times I hadredeployed the webapp. I have checked the contents of CacheEntry insideCacheEntry[] and it has an attribute \"name\" and the contents are the jsps andtld files of my app. There are as many CacheEntry with the same jsp attribute astimes the webapp has been reloaded, so I guess there is no cleaning ofCacheEntry resources at context shutdown.To reproduce this, a simple webapp with 2 jsp and a taglibrary can be used.Deploy and undeploy it many times so you can see how the count of these objectsgrows in memory."}