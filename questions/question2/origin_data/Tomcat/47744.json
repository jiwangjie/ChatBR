{"bug_id": "47744", "title": "Bug 47744Memory leak when using SSL + Java security manager", "description": "Created attachment 24170 [details]The zip described in the main bug. Contains test client, JSP for the server, and patch.When using SSL + the java security manager, Tomcat leaks memory when servletsaccess cert path/cipher as request properties.When the servlet/JSP asks forthese properties and they are not in the request, they are loaded via theJSSESupport class.The offending method calculates the key size and attempts to cache this in theSSLSession.Without the security manager, this is fine.When the securitymanager runs, however, the AccessControlContext is different every time.Retrieving from the cache will always return null, and putting into theSSLSession's cache leaks memory.This part is probably a JVM bug and notTomcat's fault, but Tomcat is exercising it nonetheless.Popular web service tools (such as Apache CXF) retrieve cert properties fromthe request for every invocation.Depending on the policy file, the leak maybe relatively slow, requiring 100s of thousands or millions of requests; or itcould be fast (in our case), requiring only ~40k to crash an instance of Tomcatlimited to 1 gig of memory.A note here.The SSLSession can be collected once it is not in use, so thememory leak isn't permanent.If you turn down the SSLSession timeout and waitat least that amount of time in between using a specific session, you mightnever see this bug.You have to continuously use the same session and tripJSSESession into attempting to get the keysize.In our particular case, wehave longconnected clients that stream information to us, so it is only takingis 1020 minutes before we are being affected negatively by this.I have attached a zip containing: A test client A script (.bat, sorry guys, but easily adapted) to run the test client A .jsp that trips the JSSESupport to call the affected method. The simplest possible policy file, to demonstrate it's not a policy fileissue.Also attached: a patch that fixes this issue. (It's in the zip for goodmeasure.)I recommend setting the invocation count to at least 100,000 or so on the testclient.Use jconsole or a similar tool attached to tomcat to monitor thememory use.You should notice that after the test, a large chunk of memory isnot able to be returned by the garbage collector.If you apply the patch,update tomcatcoyote.jar, and rerun the load test, you will notice that memoryconsumption stays low and you can immediately return to the baseline."}