{"bug_id": "46397", "title": "Bug 46397Potential memory leak with TagHandlers and JspIdConsumer", "description": "Created attachment 23022 [details]test case appAs a follow up on the thread on the mailing list, here's my summary again:Since the JSP Spec says that TagHandlers implementing JspIdConsumer may not be reused, I was expecting them to be collected after the servlet finishesprocessing. A few experiments showed that that is not the case.After delving into the details of the servlet code generated for JSPpages I discovered that the methods instantiating TagHandlers alsostore them in TagHandlerPools using reuse().I ran some more experiments to see whathappens with these TagHandlers. My setup isTomcat 6 + MyFaces + JSF CarDemo, and I'm using AspectJ to tracecreation and garbage collection of objects implementing JspIdConsumer.My experiments indicate the following:1. JspIdConsumer instances do NOT get garbage collected after a pagehas finished processing.2. JspIdConsumer instances do NOT always get garbage collected after asession times out.3. SOME JspIdConsumer instances DO get garbage collected when a givenJSPgenerated page is reloaded or accessed in a different session.To obtain these results I ran Tomcat with very little heap memory (itseems it starts fine with the 64M default), loaded the car demo inseveral browser sessions and ran through all the other JSP/Servletexamples that come with Tomcat to increase the memory consumption andtrigger GC. Unfortunately I don't have the time and tools to do aproper stress test.To provide some sort of simpler test case, I attach a WAR to use, but you still need to put the runtime library of AspectJ (aspectjrt.jar) on the classpath when running Tomcat.The behavior I observe is that whenever I load/reload the page, theJspIdConsumer objects get allocated, and some, but never all ofthem get GC'd. You should see messages on the console/log likeAdding JspIdConsumer:<someClassName:<itsHashCode:<theJspIdandRemoved <someJspIdYou will see three \"Adding messages\" for every instance created (it'sa mess to track this properly),and you should see one \"Removed\" message for every GC'd instance.When I run grep | wc on the output, the \"distance\" between the numberof created and GC'd object grows over time and reloads of the test page.I had this running for a bit, trying to see if after a session timeoutthe remaining instances would be GC'd, but they didn't. I don't knowwhat to make of this, but it feels like Tomcat is holding on to someof the instances for too long for no good reason.In any case, considering the specification of JspIdConsumer, whichstates that instances may never be reused, the caching of theseinstances as it is done in current JSPs is unnecessary, and sincethese instances don't seem to be GC'd, this seems to be a memory leak."}