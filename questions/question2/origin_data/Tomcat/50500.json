{"bug_id": "50500", "title": "Bug 50500EL evaluation of floatingpoint String value vs BigInteger loses precision", "description": "According to the EL spec ch.1.7.1,the A+B,AB,AB expressions when A is a \"String containing ., e, or E\" and B is a BigInteger have to be evaluated as follows:\"coerce both A and B to BigDecimal and apply operator\"The actual implementation though, instead of coercing A as String  BigDecimal, does two coercions:String  Double  BigDecimal, which produces a different result.To reproduce, run the following JSP page:<%pageContext.setAttribute(\"a\", \"1.1\");pageContext.setAttribute(\"b\", new java.math.BigInteger(\"1000000000000000000000\"));// \"c\" is used to explicitly coerce arguments to BigDecimalpageContext.setAttribute(\"c\", new java.math.BigDecimal(\"0\"));%${a + b}<br${(a+c) + (b+c)}<br${a  b}<br${(a+c)  (b+c)}<br${a  b}<br${(a+c)  (b+c)}Actual result:1000000000000000000001.1000000000000000888178419700125232338905334472656251000000000000000000001.1999999999999999999998.899999999999999911182158029987476766109466552734375999999999999999999998.91100000000000000088817.8419700125232338905334472656250000000000000000000001100000000000000000000.0Expected result:1000000000000000000001.11000000000000000000001.1999999999999999999998.9999999999999999999998.91100000000000000000000.01100000000000000000000.0I think it is a minor issue, though.This is reproducible in the current tc6.0.x as well.Maybe o.a.el.lang.ELArithmeticadd(Object, Object) should delegate to BIGDECIMAL instead of DOUBLE with these types of arguments."}