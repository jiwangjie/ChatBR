{"id": "14799", "title": "Bug 14799Window manipulations block other threads from executing", "description": " Bug 14799Window manipulations block other threads from executing /void createBackgroundThread() {// create something to runRunnable runnable = new Runnable() {Color black = display.getSystemColor(SWT.COLORBLACK);Color white = display.getSystemColor(SWT.COLORWHITE);Color background = black;public void run() {while(!shell.isDisposed()) {// set the background color of thecanvas.This must// be done on the ui threaddisplay.syncExec(new Runnable() {public void run() {canvas.setBackground(background);}});// wait .5 second before changing thebackground colortry {Thread.sleep(500);} catch (InterruptedException e) {}// toggle colorif (background == black)background = white;elsebackground = black;}}};// create a new thread for changing the background color andstart itnew Thread(runnable).start();}}", "OB": " On Win32 platforms (such as Win2k and WinNT), operations such as moving ascrollbar arm and resizing a window block other threads from executing.Thisis not the case on QNX.In case this is unclear, I have a testcase.Also, itshould be noted that despite the trivial nature of the test, it represents thekind of issue we have with java.awt.ScrollPane, where we try to repaint a viewas it is scrolling, from the AWT main thread.1. After the window opens, observe the background color changing between blackand white2. Try to move the scrollbar's arm up and downobserve that the colorchanging thread no longer changes the colors.That thread will also be blockedif you grab the shell's corner and do some frequent resizing.On Photon, thecolor changes continue to occur.", "EB": " you should see the canvas switch between black and whiteas long as the ui is responsive.", "SR": " Try to move the scrollbar's arm up and downobserve that the colorchanging thread no longer changes the colors.That thread will also be blockedif you grab the shell's corner and do some frequent resizing.On Photon, thecolor changes continue to occur. testcase follows import org.eclipse.swt.SWT;import org.eclipse.swt.graphics.Color;import org.eclipse.swt.layout.FillLayout;import org.eclipse.swt.widgets.Canvas;import org.eclipse.swt.widgets.Display;import org.eclipse.swt.widgets.Shell;public class TestSwtScrollEvents {Display display;Shell shell;Canvas canvas;public static void main(String[] args) {TestSwtScrollEvents test = new TestSwtScrollEvents();test.createWidgets();test.open();}void createWidgets() {display = new Display();shell = new Shell(display);shell.setLayout(new FillLayout());canvas = new Canvas(shell, SWT.BORDER | SWT.HSCROLL |SWT.VSCROLL);}void open() {shell.pack();shell.open();createBackgroundThread();while (!shell.isDisposed()) {if (!display.readAndDispatch()) display.sleep();}}/on a background thread change the color of the canvas."}