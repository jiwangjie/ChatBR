{"id": "102498", "title": "Bug 102498Script execution performance problems", "description": " Bug 102498Script execution performance problems While testing the suitability of the BIRT report engine on the IBM iSeries,unexpectedly poor performance was encountered.This was especially apparentwith the simple chart example report that is attached to this bug report.Afterdoing a bit of profiling using TPTP, the cause became apparent.The method call stack causing the performance problem is as follows:org.eclipse.birt.data.engine.executor.CachedResultSetinitorg.eclipse.birt.data.engine.executor.CachedResultSetcopyAndFilterDataRows(Object)org.eclipse.birt.data.engine.executor.CachedResultSetprocessFetchEvent(IResultObject)org.eclipse.birt.data.engine.impl.FilterByRowprocess(IResultObject)org.eclipse.birt.data.engine.script.ScriptEvalUtilevalExpr(IBaseExpression,Context, Scriptable, String, int)org.eclipse.birt.data.engine.script.ScriptEvalUtilevaluateJSAsExpr(Context,Scriptable, String, String, int)org.eclipse.birt.data.engine.script.ScriptEvalUtilevaluateJSScript(Context,Scriptable, String, String, int)org.mozilla.javascript.ContextevaluateString(Scriptable, String, String, int,Object)In this case, Rhino will compile the specified Javascript string into anoptimized Java class that implements that script.It then runs the compiledscript class and once it is done with the execution, the class instance anddefinition is thrown away.This happens over and over, costing time in theparsing, class generation and class load.In the simple (attached) case, therewere only 5 unique scripts that were being run via this method and yet over 500Javascript implementation classes were generated due to the number of times thescript evaluation code was executed for those scripts.It is unclear why thisparticular path evaluates the string on each call rather than caching thecompiled script results from Rhino and executing the compiled script instead.The class org.eclipse.birt.data.engine.impl.CompiledExpression and itssubclasses shows that the BIRT team understands the need for compilation andreuse in other parts of the system.There are obviously many approaches that could be used to fix this problem.Themost architecturally sound approach would be to have the FilterByRow (and moreabstractly, all implementations oforg.eclipse.birt.data.engine.odi.IResultObjectEvent to compile and cache thenecessary script object rather than always evaluating the string.It is unclearto us with our limited knowledge of the code just how widespread this problem iswithin the BIRT codebase and therefore how much work this would be to implement. Here its return value is changed to null.if ( result instanceof Undefined ){//throw new Exception( scriptText + \" is not valid expression.\" );return null;}}catch ( RhinoException e){RethrowJSEvalException( e, scriptText, source, lineNo );}return convertNativeObjToJavaObj(result);}This change showed significant improvement on the attached report rendering(times in minutes/seconds):Windows (1.3Ghz)WindowsiSeriesiSerieswithout changewith changewithout changewith changeFirst0:140:081:280:42LoadReload0:040:020:350:05As you can see, this had a huge impact on both the first touch render of thechart as well as the reload of the report.This naive implementation does nottake into account the fact that there may be an evergrowing script cache, butdoes prove that caching the results using LRU or similar will have a significantpositive impact.Please do whatever you possibly can to get a performance fix in place for 1.0.1. If it is not possible to do the most architecturally sound approach in thattimeframe, an LRU cache would be a good second choice.If there is anythingmore that we can do to see these changes implemented, please let us know.", "OB": "", "EB": " A simpler, less elegant, solution would be to build a Least Recently Used cacheinto ScriptEvalUtil to cache the recent script evaluations based on the text ofthe script.To test the performance improvement gained by caching the compiled script, anaive change was made to the evaluateJSScript method to compile and cache thestring to be evaluated:private static Object evaluateJSScript(Context cx, Scriptable scope,String scriptText, String source, int lineNo)throws DataException{Object result = null;try{Script script = (Script) scriptCache.get(scriptText);if (script == null){script = cx.compileString(scriptText, source, lineNo, null);scriptCache.put(scriptText, script);}result = script.exec(cx, scope);// result = cx.evaluateString(scope, scriptText, source, lineNo, null);// It seems Rhino 1.6 has changed its way to process incorrect expression.// When there is an error, exception will not be thrown, but rather an Undefined// instance will be returned.", "SR": ""}