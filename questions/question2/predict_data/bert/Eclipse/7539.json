{"id": "7539", "title": "Bug 7539Recursive loop if TitleAreaDialog.setMessage is overridden to call setErrorMessage", "description": " Bug 7539Recursive loop if TitleAreaDialog.setMessage is overridden to call setErrorMessage From EC post \"Bug in TitleAreaDialog\" by Paul North (thepaulnorth@hotmail.com).I think I've found a bug in TitleAreaDialog.I created a subclass with anoverride of setMessage as:public void setMessage(String message) {super.setErrorMessage(null);super.setMessage(message);}It loops.I looked at the code in TitleAreaDialog and the problem is thatsetErrorMessage calls setMessage.Well, since I overrode setMessage andcall setErrormessage in it we have a loop.The intent here is to do theobvious, set the error message to null so that the message will bedisplayed (see the doc).I also looked at other classes that do similarthings such as Dialog page and they do not do this.The null/not nullsituation with errorMessage must be handled differently in differentclasses even though the documentation is the same.NE replies:The spec for TitleAreaDialog.setMessage states that if an error message iscurrently shown, the (nonerror) message is saved until the error message iscleared (there was a stale reference to clearErrorMessage which I've fixed,but the intent is the same).By overriding of this, you are changing the semantics so that it clears theerror message at the same time.That is, your subclass will be inconsistent with the spec.If you want a convenience method which clears the error message and sets anew nonerror message at the same time, I recommend that you give it adifferent name than setMessage.This would avoid the recursive loop you'reseeing.It is an implementation detail of setErrorMessage that it calls setMessageto restore the old message when the error message is cleared (set to null).This is not an unreasonable thing to do.However, to be consistent with the other implementations, I'm changing theimplementation so that setErrorMessage does not call setMessage.", "OB": "", "EB": "", "SR": ""}