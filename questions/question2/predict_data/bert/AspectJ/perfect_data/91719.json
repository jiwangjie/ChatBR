{"id": "91719", "title": "Bug 91719Work with Oli B to pull in examples of generating all the LINT messages", "description": " Oli on the dev list has written code examples that generate each type of lintwarning, work with him to pull them into the codebase.The relevant email isbelow.Make sure they go via a bugzilla attachment to ensure EPL rules are met.====Hi Andrew,for \"unresolvableMember\" I gave up to find an example. There are new Xlint warnings?Which ones?Happy EasternOliverAndrew Clement wrote: Hi Oli, If you can come up with examples that produce all of them, I'd be keen to include them as testcases in AspectJ where appropriate as I know we don't properly test some of them.A good place to start would be searching in the bugzilla databaseI'm not sure how accurately that is indexed by google.Here's a bit of info I've quickly dug up:invalidWildcardTypeName Never signalled anywhere in the codebase! (so ignore this one...)unresolvableMember, This one is hard to reproduce, see bug 59596 where I've done a bit of write up about it. shadowNotInStructure Signalled if the structure model is broken, probably can't happen right now as we work hard to ensure it is always correct. // Sub is a subclass of Super. ============== CovAspect06.ajaspect CovAspect06 {pointcut p(): call(Car Sub.getCar());@org.aspectj.lang.annotation.SuppressAjWarningsbefore(): p() {System.out.println(\"[call(Car Sub.getCar()) matched on '\"+thisJoinPoint+\":\"+thisJoinPoint.getSourceLocation()+\"']\");} } ================ ajc 1.5 CovAspect06.aj CovBaseProgram01.janoInterfaceCtorJoinpoint related to trying to put advice on constructor execution join point for an interface I think... hope some of that is useful... Andy. \"Oli B.\" <boehm@javatux.de Sent by: aspectjdevadmin@eclipse.org", "OB": " But for the otherXlint warnings you can find my example under http://www.javatux.de/aj/as compress tarfile (xlint.tgz) or as directory (for online browsing).BTWI read the announcement from Adrian. unmatchedSuperTypeInCall These two covariance problems demonstrate this xlint.it is related to specifying the declaring type in a call() type pattern and it not matching as you expected... CovBaseProgram01.javaclass Car {} class FastCar extends Car {} class Super {Car getCar() {return new Car();} } class Sub extends Super {FastCar getCar() {return new FastCar();} } public class CovBaseProgram01 {public static void main(String[] argv) {new CovBaseProgram01().run();}public void run() {Super instancesuper = new Super();Subinstancesub= new Sub();Car c1 = instancesuper.getCar();Car c2 = instancesub.getCar();} } // FastCar is a subclass of Car.", "EB": " typeNotExposedToWeaver Should be recreatable by trying to weave into something that is actually on the classpath rather than the inpath.", "SR": " Bug 91719Work with Oli B to pull in examples of generating all the LINT messages"}