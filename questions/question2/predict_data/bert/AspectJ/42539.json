{"id": "42539", "title": "Bug 42539throw derivative pointcuts not advised.", "description": " Bug 42539throw derivative pointcuts not advised. Given the following point cut and advice:public aspect ExceptionAspect{pointcut exceptionThrower() : execution(publicExceptionBugTest.(..", "OB": " )throws Exception+);declare warning : exceptionThrower() : \"throws Exception+\";}And the to be aspected code:public class ExceptionBugTest{class MyException extends Exception{}public void method1() throws Exception{}public void method2() throws MyException{}}listing file default.lst:C:\\temp\\AJC Bug\\ExceptionAspect.ajC:\\temp\\AJC Bug\\ExceptionBugTest.javaAJC does not advise ExceptionBugTest.method2().The output from the compilationis the following:C:\\temp\\AJC Bugajc argfile default.lst classpath %ASPECTJHOME%\\lib\\aspectjrt.jarC:\\eclipse\\workspace\\AJC Bug\\ExceptionBugTest.java:11 throws Exception+From the aspectj mailing list, contributed by Jim Hugunin:&lt;detail&gt;The bug was caused because the code for ThrowsPattern mistakenlyused the internal protected method TypePattern.matchesExactly instead of theexternal public method TypePattern.matchesStatically.Because the classes werein the same package, Java's accessibility rules allowed this.It would be niceif there was an easy way to specifiy that a method could only be accessed fromsubtypes.&lt;/detail&gt;", "EB": "", "SR": ""}