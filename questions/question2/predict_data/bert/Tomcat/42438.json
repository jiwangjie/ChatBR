{"id": "42438", "title": "Bug 42438Duplicate JSP temp variable declaration when jsp:attribute used in conjunction with custom tags", "description": " Bug 42438Duplicate JSP temp variable declaration when jsp:attribute used in conjunction with custom tags Here is an example of the bug in its most primitive form:WEBINF/jsp/test.jsp:===================================<%@ page contentType=\"text/html;charset=UTF8\" language=\"java\" %<%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\"%<%@ taglib prefix=\"t\" tagdir=\"/WEBINF/tags\" %<jsp:element name=\"a\"<jsp:attribute name=\"href\"http://www.apache.org</jsp:attribute</jsp:element<t:test /<c:if test=\"${true}\"it's true!</c:if===================================WEBINF/tags/test.tag:===================================<%@ tag pageEncoding=\"UTF8\" bodycontent=\"scriptless\" %do nothing===================================WEBINF/tagPlugins.xml:===================================<tagplugins<tagplugin<tagclassorg.apache.taglibs.standard.tag.rt.core.IfTag</tagclass<pluginclassorg.apache.jasper.tagplugins.jstl.core.If</pluginclass</tagplugin</tagplugins===================================Once you run this through Jasper, you will get the following java code:===================================package org.apache.jsp.WEB002dINF.jsp;import javax.servlet. ;import javax.servlet.http. ;import javax.servlet.jsp. ;public final class testjsp extends org.apache.jasper.runtime.HttpJspBaseimplements org.apache.jasper.runtime.JspSourceDependent {private static java.util.List jspxdependants;static {jspxdependants = new java.util.ArrayList(1);jspxdependants.add(\"/WEBINF/tags/test.tag\");}private org.apache.jasper.runtime.TagHandlerPool jspxtagPoolciftest;public Object getDependants() {return jspxdependants;}public void jspInit() {jspxtagPoolciftest =org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());}public void jspDestroy() {jspxtagPoolciftest.release();}public void jspService(HttpServletRequest request, HttpServletResponse response)throws java.io.IOException, ServletException {JspFactory jspxFactory = null;PageContext pageContext = null;HttpSession session = null;ServletContext application = null;ServletConfig config = null;JspWriter out = null;Object page = this;JspWriter jspxout = null;PageContext jspxpagecontext = null;try {jspxFactory = JspFactory.getDefaultFactory();response.setContentType(\"text/html;charset=UTF8\");pageContext = jspxFactory.getPageContext(this, request, response,null, true, 8192, true);jspxpagecontext = pageContext;application = pageContext.getServletContext();config = pageContext.getServletConfig();session = pageContext.getSession();out = pageContext.getOut();jspxout = out;String jspxtemp0 = \"http://www.apache.org\";out.write(\"<\" + \"a\" + \" href=\\\"\" + jspxtemp0 + \"\\\"\" + \"/\");if (jspxmethttest0(jspxpagecontext))return;boolean jspxtemp0=((java.lang.Boolean)org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate(\"${true}\",java.lang.Boolean.class, (PageContext)jspxpagecontext, null,false)).booleanValue();if (jspxtemp0){out.write(\"it's true! \");}} catch (Throwable t) {if (! (t instanceof SkipPageException)){out = jspxout;if (out != null && out.getBufferSize() != 0)out.clearBuffer();if (jspxpagecontext != null) jspxpagecontext.handlePageException(t);}} finally {if (jspxFactory != null) jspxFactory.releasePageContext(jspxpagecontext);}}private boolean jspxmethttest0(PageContext jspxpagecontext)throws Throwable {PageContext pageContext = jspxpagecontext;JspWriter out = jspxpagecontext.getOut();//t:testorg.apache.jsp.tag.web.testtag jspxthttest0 = neworg.apache.jsp.tag.web.testtag();jspxthttest0.setJspContext(jspxpagecontext);jspxthttest0.doTag();return false;}}===================================Scan that code for the temp variable named jspxtemp0.Notice that there isone String with that name and one boolean with that name.Thus, this results ina java compilation error once you ultimately try to compile the page:===================================Compiling 2 source files to c:\\work\\marzen\\tmp\\jspc\\classesc:\\work\\marzen\\tmp\\jspc\\src\\org\\apache\\jsp\\WEB002dINF\\jsp\\testjsp.java:61:jspxtemp0 is already defined injspService(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)boolean jspxtemp0=^c:\\work\\marzen\\tmp\\jspc\\src\\org\\apache\\jsp\\WEB002dINF\\jsp\\testjsp.java:63:incompatible typesfound: java.lang.Stringrequired: booleanif (jspxtemp0){^Note: c:\\work\\marzen\\tmp\\jspc\\src\\org\\apache\\jsp\\WEB002dINF\\jsp\\testjsp.javauses unchecked or unsafe operations.Note: Recompile with Xlint:unchecked for details.2 errors===================================The problem is caused by the fact that the Node.NamedAttribute constructordirectly uses JspUtil.nextTemporaryVariableName() to generate a variable name.I believe that if the variable was initialized justintime in the getter,that the problem would be solved.The flow goes like this:1) When compiling test.jsp, Compiler.generateJava() callsJspUtil.resetTemporaryVariableName() to reset the temp variable name2) The test.jsp file gets parsed immediately thereafter, thus creating avariable with name jspxtemp0 for the \"href\" attribute3) Shortly thereafter, tag files are loaded, which means that the test.tag filewill be recompiled, thus resulting in JspUtil.resetTemporaryVariableName() beinginvoked again (thus setting the variable back to 0).4) Since test.tag doesn't do anything to cause a temporary variable name to berecreated, the temp variable name remains at 0.5) Upon returning to the compilation of the test.jsp, the If tag plugin is usedto create yet another variable name with name jspxtemp0, hence the conflict.I think step 2 is the root of the problem.If the NamedAttribute didn't get atemporary variable name assigned in the constructor and instead generated itjustintime in the getter, then this issue wouldn't exist since the \"href\"attribute variable name would be created only after first compiling all of thetag files.I still think that the logic in the compilation is a bit strange given that theJSP will use temporary variable names starting at whatever point the lastcompiled tag file left off at.I think that issue could be resolved by movingthe JspUtil.resetTemporaryVariableName() call in Compiler.generateJava() downafter the call to loadTagFiles().Note that you would probably also want tocall JspUtil.resetTemporaryVariableName() in the ctxt.isPrototypeMode()scenario.Here is the diff that I would propose for Compiler.java based on the5.5.20 codebase:===================================150,152d149<// Reset the temporary variable counter for the generator.<JspUtil.resetTemporaryVariableName();<157a155,156// Reset the temporary variable counter for the generator.JspUtil.resetTemporaryVariableName();179a179,181// Reset the temporary variable counter for the generator.JspUtil.resetTemporaryVariableName();===================================Here is the diff I would propose for Node.java:===================================1791d1790<temporaryVariableName = JspUtil.nextTemporaryVariableName();1837a1837,1839if(temporaryVariableName==null) {temporaryVariableName = JspUtil.nextTemporaryVariableName();}===================================", "OB": "", "EB": "", "SR": ""}