{"id": "10526", "title": "Bug 10526Authenticators do not always cache the Principal", "description": " This is especially important when usingJDBCRealm or JNDIRealm to reduce the load on external authentication services.Most authenticators (BasicAuthenticator, SSLAuthenticator andDigestAuthenticator) call AuthenticatorBase.register()to cache the Principal.However register() does nothing if a session object does not already exist, socaching does not occur when the application does not create a session objectitself. The problem can be seen by setting a security constraint on tomcatdocsand then browsing the Tomcat documentationthe external authenticationservice is hit on every request.The problem does not occur with form based login, because FormAuthenticatorcaches the Principal itself and creates a new session if necessary to do it.Probably the best fix would be to change AuthenticatorBase.register() to createa new session by calling getSession(request, true) instead of getSession(request, false). However, perhaps there is a reason why this is not beingdonethough if so I cannot see what it is.An alternative is to change the concrete authentication classes to make sure asession exists before calling register(), e.g. BasicAuthenticator.java23 Mar 2002 17:52:16 00001.12+++ BasicAuthenticator.java6 Jul 2002 12:46:30 0000@@ 160,6 +160,7 @@String password = parsePassword(authorization);principal = context.getRealm().authenticate(username, password);if (principal != null) {+Session session = getSession(request, true);register(request, response, principal, Constants.BASICMETHOD,username, password);return (true);Similar patches would be required for SSLAuthenticator and DigestAuthenticatorof course.", "OB": " Bug 10526Authenticators do not always cache the Principal", "EB": " Once a user is authenticated a Principal object is supposed to be cached forthe duration of the user's session.", "SR": ""}