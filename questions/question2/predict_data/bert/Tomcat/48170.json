{"id": "48170", "title": "Bug 48170Unnecessary synchronization by JspFactory.getDefaultFactory contributes to stability problems", "description": " Bug 48170Unnecessary synchronization by JspFactory.getDefaultFactory contributes to stability problems I have a soak test at constant load that is initially stable.Within the hour, an ever increasing number of blocked threads develops.The vast majority of threads are in JSP rendering, blocked on JspFactory.getDefaultFactory().The server eventually crashes.We are running Java 6.Upon code inspection, there appears to be no real reason for synchronizing the getDefaultFactory() and setDefaultFactory() as the setter is called only once upon startup when the subclass loads.Patching the jar, I tried three other experiments:1) Removing the synchronized keyword entirely.2) Locking on an inner static class instead of the JspFactory.class.3) Using volatile for the static member variable.Both experiments 1 and 3 showed vastly better stability.I was able to double the throughput of the server without seeing increasing number of blocked threads.Experiment 2 yielded the same behavior as the original code.Thus, no other codeis synchronizing on JspFactory.class.Rather, there seem to be some sort of contention in the java.lang.Class monitor.Using volatile would preserve the multithreading semantics while avoiding contributing to the instability issue.", "OB": "", "EB": "", "SR": ""}