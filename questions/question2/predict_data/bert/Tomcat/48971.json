{"id": "48971", "title": "Bug 48971memory leak protection : stopping TimeThreads should be optional and disabled by default", "description": " Bug 48971memory leak protection : stopping TimeThreads should be optional and disabled by default While investigating to write this wiki page http://wiki.apache.org/tomcat/MemoryLeakProtection , I realized that WebAppClassLoader.clearReferencesStopTimerThread() can have dangerous side effects.Indeed, if the TimerThread was spawned by some library deployed in the common (or even JRE) classpath, then stopping it can impact other webapps still running.It would probably be a bug of that library to have such a thread with such a context classloader, but we have to be realistic, we cannot fix every thirdparty library (and the JRE).In my opinion, tomcat should better play it safe in such a case, and should not attempt by default to stop TimerThreads : it's safer to have a leak for a stopped webapp than break running apps !WebAppClassLoader.clearReferencesStopTimerThread() should be conditioned with the existing boolean clearReferencesStopThreads.see attached proposed patch.", "OB": "", "EB": "", "SR": ""}