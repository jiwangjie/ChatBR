{"id": "49150", "title": "Bug 49150All primary sessions are deleted at BackupManagerstopInternal.", "description": "Bug 49150All primary sessions are deleted at BackupManagerstopInternal. BackupManagerstopInternal is as follows.=====protected synchronized void stopInternal() throws LifecycleException {super.stopInternal();LazyReplicatedMap map = (LazyReplicatedMap)sessions;if ( map!=null ) {map.breakdown();}cluster.removeManager(this);}=====In Tomcat 7.0.0 RC1, superstopInternal() is called first.In StandardManagerstopInternal() of the super class,The session is stored, and expire all active sessions.Storing session is unnecessary in BackupManager.andWhen the session expired, the session is deleted from all cluster nodes.As a Result,All primary sessions (of own node has) are deletedfrom all cluster nodes.For instance,Node1 : sessionA(primary), sessionB(proxy), sessionC(backup)Node2 : sessionA(backup), sessionB(primary), sessionC(proxy)Node3 : sessionA(proxy), sessionB(backup), sessionC(primary)If Node1 is stopped, it becomes the following.Node1 : stoppedNode2 : sessionB(primary), sessionC(backup)Node3 : sessionB(backup), sessionC(primary)sessionA is expired.It should be the following.Node1 : stoppedNode2 : sessionA(primary), sessionB(primary), sessionC(backup)Node3 : sessionA(backup), sessionB(backup), sessionC(primary)There is no problem in Tomcat6.0.x,because it executes super.stop() after LazyReplicatedMapbreakdown() .I made a patch against trunk.Best Regards. ", "OB": "", "EB": "", "SR": ""}