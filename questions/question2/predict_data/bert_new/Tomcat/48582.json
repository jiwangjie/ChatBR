{"id": "48582", "title": "Bug 48582JspServletWrapper.getServletContext() throws NullPointerException", "description": "Bug 48582JspServletWrapper.getServletContext() throws NullPointerException We're getting this exception/stack trace in a web application:''[20100115 17:52:01,381] ERROR [org.apache.catalina.core.ContainerBase] Exception invoking periodic operation:'java.lang.NullPointerExceptionat org.apache.jasper.servlet.JspServletWrapper.getServletContext(JspServletWrapper.java:174)at org.apache.jasper.compiler.JspRuntimeContext.checkCompile(JspRuntimeContext.java:304)at org.apache.jasper.servlet.JspServlet.periodicEvent(JspServlet.java:289)at org.apache.catalina.core.StandardWrapper.backgroundProcess(StandardWrapper.java:668)at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1571)at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1580)at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1580)at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1580)at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.run(ContainerBase.java:1560)at java.lang.Thread.run(Thread.java:595)Looking at JspServletWrapper, I see that it has 2 constructors; one for JSP pages, and another for tag files.The one for tag files has a problem in this line:this.config = null; // not usedbecause this.config is indeed used by the public method getServletContext():public ServletContext getServletContext() {return config.getServletContext();}and since that method is public, you can't safely say that this.config will not be used. ", "OB": ":)So this means that if you create a JspServletWrapper for a JSP tag file, you can never call getServletContext() on it, or you'll generate the NPE above.However, JspRuntimeContext does exactly that in the following block of code, from the checkCompile() method:Object [] wrappers = jsps.values().toArray();for (int i = 0; i < wrappers.length; i++ ) {JspServletWrapper jsw = (JspServletWrapper)wrappers[i];JspCompilationContext ctxt = jsw.getJspEngineContext();// JspServletWrapper also synchronizes on this when// it detects it has to do a reloadsynchronized(jsw) {try {ctxt.compile();} catch (FileNotFoundException ex) {ctxt.incrementRemoved();} catch (Throwable t) {jsw.getServletContext().log(\"Background compile failed\",t);}}}The values in the \"jsps\" map are both JSP files and tag files, as seen by TagFileProcessor.loadTagFile(), which puts tag files there.So to summarize, any JSP tag file that experiences a compilation failure inside of the checkCompile() method will seem to generate this NullPointerException.A secondary issue here is that if any problem occurs inside of the catch block in the code pasted above (as is currently happening), the original exception is swallowed forever.This is the Throw From Within Finally antipattern (http://today.java.net/article/2006/04/04/exceptionhandlingantipatternsthrowFromWithinFinally) and should be fixed as well. ", "EB": "", "SR": ""}