{"id": "114005", "title": "Bug 114005annotated ITD fields on interfaces have no annotation", "description": "Bug 114005annotated ITD fields on interfaces have no annotation : @SampleAnnotation;}secondProperty has no Annotation as one can see with:public class Test implements TestInterface {public static void main(String[] args) {for (Field field: Test.class.getFields()) {System.err.println(field.toString().concat(\" \").concat(String.valueOf(field.isAnnotationPresent(SampleAnnotation.class))));}}}I did not try whether this is also the case for method ITS on interfaces.Secondly the field name isajc$interField$testDeclaration$testTestInterface$secondProperty instead ofsimply secondProperty. Is this what is meant with bug 73507?What is with private and package protected ITD of fields and runtimereflection? Also \"declare @field:Test+. : @SampleAnnotation;\" isnot applied for private or package protected declarations. So should one onlyannotate public field IDTs (supported by compiler warnings) to have usefulruntime behaviour (with runtime RetentionPolicy annotations)?So it is strange that the introductory example on annotations shows annotatedprivate field ITDs on interfaces :)Thank you very much for your help,Vincenz ", "OB": "As stated in the notebook it is allowed to annotate field ITDs.This seems not to work properly with interfaces.public interface TestInterface {}@Retention(RetentionPolicy.RUNTIME)public @interface SampleAnnotation {}public aspect Declaration {declare parents: (@SampleAnnotation ) implements TestInterface;// this is fine@SampleAnnotationpublic transient String Test.firstProperty;/ this does not work@SampleAnnotationpublic transient String TestInterface.secondProperty;// this also does not workdeclare @field:TestInterface+. Because the field name is mangled (Test.class.getField(\"firstProperty\") raises a NoSuchFieldException when declared private orpackage protected). ", "EB": "", "SR": ""}