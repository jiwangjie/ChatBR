{"id": "109173", "title": "Bug 109173Weaving Adaptor enhancements for performance, configuration and diagnosis", "description": "Bug 109173Weaving Adaptor enhancements for performance, configuration and diagnosis Here are some suggested enhancements as a result of exhaustive testing in theEclipse/OSGi environment.1.If no aspects are declared for a particular class loader, eitherbecause there are no visible aop.xml files or they contain no aspectdefinitions, then we should shortcircuit the implementation of weaveClass()so that bytecode is not unnecessarily passed to the weaver. This isespecially important under OSGi where there may be hundreds of class bundles,each with their own class loader only some of which are being woven. I therefore propose a System propertyto set the a resource names for finding aop.xml files which would defaultto \u201cMETAINF/aop.xml\u201d e.g. Dorg.aspectj.weaver.loadtime.configuration=METAINF/aop.xml;org/aspectj/aop.xml.3.We should not be catching Throwablein Aj. ", "OB": "We canuse the existing \u201cenabled\u201d flag.2.As previously discussed on aspectjdev the METAINF directory isconsidered private in OSGi and is therefore an inappropriate location foraop.xml files declaring shared aspects. BCException and issue messages while letting otherruntime exceptions pass back to the class loader. ", "EB": "Instead we should catchknown exceptions e.g. A user providedIMessageHandler implementation can decide under what circumstances to abort.Alternatively if Aj is considered to be a \u201csafe\u201d interface for weaving agentse.g. JVMTI then the dump logic it contains should be moved to theWeavingAdaptor so that it can be used directly from a class loader. ", "SR": ""}