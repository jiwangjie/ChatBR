{"code": 200, "status": "success", "bug_report": {"0": {"text": "Bug 46819  Remove redundant object instantiations in JspRuntimeLibrary.", "labels": []}, "1": {"text": "Created attachment 23353 [details] Patch file to replace new with valueOf, and some valueOf with parse  While perusing the code, I noticed that java\\org\\apache\\jasper\\runtime\\JspRuntimeLibrary.java code was doing a few things that I think can be improved:  1.  coerce methods were instantiating new objects, only to convert them to primitives.", "labels": []}, "2": {"text": "For example:      return Boolean.valueOf(s).booleanValue();  This can be rewritten (and simplified) as:      return Boolean.parseBoolean(s);  This pattern was repeated for numerous primitive types.", "labels": ["OB", "SR"]}, "3": {"text": "2.", "labels": ["OB", "SR"]}, "4": {"text": "Objects were being instantiated using new instead of calling valueOf.", "labels": ["OB", "EB"]}, "5": {"text": "For example:      return new Byte((byte) 0);  instead of:      return Byte.valueOf((byte) 0);  According to the Java API, valueOf should generally be used in preference to the constructor as this method is likely to yield significantly better space and time performance.", "labels": ["EB"]}, "6": {"text": "3.  toString methods are instantiating a temporary object just to turn it into a string value.", "labels": ["OB", "SR"]}, "7": {"text": "For example:      return new Integer(i).toString();  This can be rewritten (and simplified) as:      return Integer.toString(i);  This pattern was repeated for numerous primitive types.", "labels": ["SR"]}, "8": {"text": "I took the liberty of creating a patch.", "labels": []}, "9": {"text": "These changes should yield improved performance and reduce the memory footprint.", "labels": ["OB", "EB"]}}}