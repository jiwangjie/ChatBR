{"code": 200, "status": "success", "bug_report": {"0": {"text": "Bug 339300  problem weaving anonymous inner (member owned) classes in scala library.", "labels": []}, "1": {"text": "Reported by Ramnivas.", "labels": []}, "2": {"text": "Due to the use of numerous $ chars in scala classnames, some of the AspectJ handling of inner classes breaks down.", "labels": ["OB"]}, "3": {"text": "It should be possible to correctly use the available class attributes rather than mess around with attributes.", "labels": ["OB", "EB"]}, "4": {"text": "A while back one use did contribute a change to enable scala weaving which tried to use the InnerClasses attribute before falling back on string chopping.", "labels": ["OB", "SR"]}, "5": {"text": "However we have now hit another case.", "labels": []}, "6": {"text": "In the scenario we are dealing with the class scala.Predef$$anon$3 in the scala library (a 2.9.0-SNAPSHOT version).", "labels": []}, "7": {"text": "What we normally do here is in that type we discover the InnerClass attribute and refer to the outerclass index it holds.", "labels": ["OB", "SR"]}, "8": {"text": "Unfortunately, due to it being an anonymous inner inside a method, the index is 0.", "labels": []}, "9": {"text": "So we fail to process the attribute and with string chopping come up with a stupid guessed name for the outer.", "labels": ["OB"]}, "10": {"text": "The solution is to use the EnclosingMethod attribute in these situations.", "labels": []}, "11": {"text": "The EnclosingMethod attribute is an optional attribute.", "labels": ["OB"]}, "12": {"text": "A class must have an EnclosingMethod attribute if and only if it is a local class or an anonymous class.", "labels": ["EB"]}, "13": {"text": "A class may have no more than one EnclosingMethod attribute.", "labels": []}, "14": {"text": "The EnclosingMethod attribute includes a pointer to the containing outerclass (that had the method in which encloses this inner type).", "labels": ["OB", "SR"]}}}