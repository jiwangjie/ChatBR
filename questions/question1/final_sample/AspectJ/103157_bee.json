{"code": 200, "status": "success", "bug_report": {"0": {"text": "Bug 103157  after returning should not bind \"null\" as return value.", "labels": ["OB", "EB"]}, "1": {"text": "Today I found out the following.", "labels": ["OB", "SR"]}, "2": {"text": "When writing an advice as...      after() returning(Object o): staticinitialization(*) {         System.out.println(o);     }  This advice is indeed executed every time a type returns from  staticinitialization.", "labels": ["OB"]}, "3": {"text": "However, since there is no returned object, o is bound to  \"null\".", "labels": ["OB"]}, "4": {"text": "I think this is inconsistent with the fact where we have something like:      after() returning(T o): call(Object Foo.bar()) {         System.out.println(o);     }  Here, AFAIK the advice would not execute in cases where the returned object is  not an instance of T.  Thus, I would propose that the first advice should only execute at joinpoints  where a return value is available.", "labels": ["EB"]}}}