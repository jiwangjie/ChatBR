{"id": "38131", "title": "Bug 38131ajc needs -d . option while correctly compiling classes from subpackage", "description": "When using ajc 1.1rc1 to compile classes from a subpackage, the -d . option is required. This behavior is a regression since rc1 and differs from javac. It is suspected that this issue may be related to a change in the underlying Eclipse compiler.\n\nTo reproduce the bug:\n1. Create a class in a subpackage, for example:\n\n```java\npackage subpackage;\n\npublic class Test {\n    public static void main(String[] args) {\n        System.out.println(\"Hello\");\n    }\n}\n```\n\n2. Compile the class using the command `ajc subpackage\\Test.java`\n\nObserved behavior:\nThe Test.class file is placed in the `subpackage\\subpackage` directory, instead of the expected `subpackage` directory.\n\nRunning the `java` command on the compiled class results in the exception:\n```\nException in thread \"main\" java.lang.NoClassDefFoundError: subpackage/Test\n```\n\nExpected behavior:\nThe Test.class file should be placed in the `subpackage` directory.\n\nTo work around this issue, use the command `ajc -d . subpackage\\Test.java` or `javac subpackage\\Test.java`.", "OB": "The Test.class is then put in the `subpackage\\subpackage` directory.\n\nThis means running the `java` command results in the exception:\n```\nException in thread \"main\" java.lang.NoClassDefFoundError: subpackage/Test\n```\n\nRunning either of the following commands fixes the problem: `ajc -d .` or `javac`.", "EB": "The Test.class file should be placed in the `subpackage` directory, not in `subpackage\\subpackage`.\n\nRunning the `java` command should not result in any exception.", "SR": "1. Create a class in a subpackage.\n2. Compile the class using `ajc subpackage\\Test.java`.\n3. Run the `java` command on the compiled class to observe the exception.\n\nTo work around this issue:\n- Use the command `ajc -d . subpackage\\Test.java` to compile the class.\n- Or, use `javac subpackage\\Test.java` instead of `ajc`."}