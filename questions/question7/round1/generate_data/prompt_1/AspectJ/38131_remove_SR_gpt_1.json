{"id": "38131", "title": "Bug 38131ajc needs -d option while correctly compiling classes from subpackage", "description": "Bug 38131ajc needs -d option. I am using 1.1rc1. This is a regression since rc1 and a deviation from javac. I am guessing this may have something to do with a change in the underlying Eclipse compiler.\n\nTo reproduce the issue, follow these steps:\n\n1. Create a class in a subpackage such as:\n\npackage subpackage;\n\npublic class Test {\n\npublic static void main(String[] args) {\n\nSystem.out.println(\"Hello\");\n\n}\n\n}\n\n2. Compile the class using the following command:\n\najc subpackage\\Test.java\n\n3. After running the command, you will see a directory named \"subpackage\" created under the existing \"subpackage\" directory. The test.class file is placed in the \"subpackage\\subpackage\" directory.\n\n4. Attempt to run the compiled class using the java command:\n\njava subpackage/Test\n\n5. The following exception will be thrown:\n\nException in thread \"main\" java.lang.NoClassDefFoundError: subpackage/Test\n\n6. Running either of the following commands fixes the problem:\n\najc -d . subpackage\\Test.java\n\najc -d subpackage subpackage\\Test.java", "OB": "When compiling the Test.java file using the 'ajc' command without the -d option, the test.class file gets placed in the 'subpackage\\subpackage' directory. As a result, running the 'java' command results in a NoClassDefFoundError for 'subpackage/Test'.", "EB": "It would be nice to have the same behavior as the 'javac' command, where the compiled class file is placed directly in the 'subpackage' directory.", "SR": "To reproduce the correct behavior, compile the Test.java file using the 'ajc' command with the '-d .' or '-d subpackage' option followed by the file path 'subpackage\\Test.java'."}