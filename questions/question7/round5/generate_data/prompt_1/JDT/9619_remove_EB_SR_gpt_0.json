{"id": "9619", "title": "Bug 9619 - Move static member: Dialog details", "description": "Bug 9619 - Move static member: Dialog details 20020212a. Mnemonicsb. No validation on the type field. Type existence is not too expensive (done in the type wizard for super class), so it could be done. At least isValidTypeName. f. label could say 'Select destination type:' g. Browse button is too small (use SWTUtil for standard button sizes). c. Title is used for long text. When going to the next page, it says 'Type not found'. Only types from the source folders of the own project should be shown in the dialog. e. Destination type can be source type: refactoring warns that this will result in errors (which is not true) and makes pseudo changes in all referencing classes.", "OB": "The browse button is smaller than the standard button sizes. The title is used for long text instead of displaying 'Type not found' on the next page. The dialog displays types from folders other than the source folders of the current project. When the destination type is the same as the source type, the refactoring warns about resulting errors and makes changes in all referencing classes, which is incorrect.", "EB": "The browse button should have standard button size. Instead of using the title, the dialog should display 'Type not found' on the next page. Only types from the source folders of the current project should be shown in the dialog. The refactoring should not warn about errors and make changes in referencing classes when the destination type is the same as the source type.", "SR": "To reproduce the issue:1. Open the dialog for moving a static member.2. Observe that the browse button is smaller than the standard button sizes.3. Proceed to the next page and observe that the title is used for long text instead of displaying 'Type not found'.4. Note that the dialog displays types from folders other than the source folders of the current project.5. Try to move a static member to a destination type that is the same as the source type. Observe that the refactoring warns about resulting errors and makes changes in all referencing classes, which is incorrect."}