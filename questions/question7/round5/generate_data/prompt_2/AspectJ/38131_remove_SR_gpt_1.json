{"id": "38131", "title": "Bug 38131: ajc needs -d option while correctly compiling classes from subpackage", "description": "Bug 38131: ajc needs -d option. I am using 1.1rc1. This is a regression since rc1 and a deviation from javac. I am guessing this may have something to do with a change in the underlying Eclipse compiler.\nTo reproduce the issue, follow these steps:\n1. Create a class in a subpackage such as:\n\npackage subpackage;\n\npublic class Test {\n    public static void main(String[] args) {\n        System.out.println(\"Hello\");\n    }\n}\n\n2. Compile using the following command: ajc subpackage\\Test.java\n\nObserved Behavior:\nAfter compiling, a directory named \"subpackage\" is created under the existing \"subpackage\" directory. The \"Test.class\" file is put in the \"subpackage\\subpackage\" directory.\nWhen running the java command, the following exception is thrown:\nException in thread \"main\" java.lang.NoClassDefFoundError: subpackage/Test\n\nExpected Behavior:\nThe behavior should be the same as javac, where the output class file is placed in the correct directory.\n\nSteps to Reproduce:\nTo fix the problem, run either of the following commands: ajc -d . subpackage\\Test.java", "OB": "After compiling, a directory named \"subpackage\" is created under the existing \"subpackage\" directory. The \"Test.class\" file is put in the \"subpackage\\subpackage\" directory. When running the java command, the following exception is thrown: Exception in thread \"main\" java.lang.NoClassDefFoundError: subpackage/Test", "EB": "The behavior should be the same as javac, where the output class file is placed in the correct directory.", "SR": "To reproduce the issue, follow these steps:\n1. Create a class in a subpackage such as:\n\npackage subpackage;\n\npublic class Test {\n    public static void main(String[] args) {\n        System.out.println(\"Hello\");\n    }\n}\n\n2. Compile using the following command: ajc -d . subpackage\\Test.java"}