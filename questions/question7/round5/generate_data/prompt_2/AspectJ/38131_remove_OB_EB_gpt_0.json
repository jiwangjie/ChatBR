{"id": "38131", "title": "Bug 38131 - ajc needs the -d option while correctly compiling classes from subpackage", "description": "Bug 38131 - ajc needs the -d option while correctly compiling classes from subpackage.\n\nI am using 1.1rc1. This is a regression since rc1 and a deviation from javac. I am guessing this may have something to do with a change in the underlying Eclipse compiler.\n\nTo reproduce the issue, follow these steps:\n1. Create a class in a subpackage such as:\n   package subpackage;\n\n   public class Test {\n       public static void main(String[] args) {\n           System.out.println(\"Hello\");\n       }\n   }\n\n2. Compile using the following command: \n   ajc -d subpackage subpackage\\Test.java\n\nAfter executing the above command, you will observe that a directory named \"subpackage\" is created within the existing \"subpackage\" directory.\n\nFor comparison, you can use the following command with javac:\n   javac -d subpackage subpackage\\Test.java\n\nThe observed behavior is that the ajc command does not correctly handle the -d option when compiling classes from a subpackage.", "OB": "The ajc command does not correctly handle the -d option when compiling classes from a subpackage. Instead of creating the output directory at the specified location, it creates a nested directory structure where the output directory is created within itself.", "EB": "The ajc command should correctly handle the -d option when compiling classes from a subpackage. It should create the output directory at the specified location without any nested directory structure.", "SR": "To reproduce the issue, follow these steps:\n1. Create a class in a subpackage.\n2. Compile the class using the ajc command with the -d option and specify the output directory as the subpackage itself.\n3. Verify that the ajc command creates the output directory at the specified location without any nested directory structure."}