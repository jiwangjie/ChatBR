{"id": "38131", "title": "Bug 38131ajc needs -d option while correctly compiling classes from subpackage", "description": "Bug 38131ajc needs -d. I am using 1.1rc1. This is a regression since rc1 and a deviation from javac. I am guessing this may have something to do with a change in the underlying Eclipse compiler.\nCreate a class in a subpackage such as:\n\n```java\npackage subpackage;\n\npublic class Test {\n\n    public static void main(String[] args) {\n        System.out.println(\"Hello\");\n   }\n}\n```\n\nThen compile using the following command:\n\n```shell\najc subpackage\\Test.java\n```\n\nYou will see a directory \"subpackage\" created under the existing \"subpackage\" directory.\n\n```shell\nsubpackage\\Test.java\n```\n\nor\n\n```shell\njavac subpackage\\Test.java\n```\n\nNo big deal, really.", "OB": "When compiling the Test class using ajc (AspectJ compiler) with the command `ajc subpackage\\Test.java`, the resulting test.class file is put in subpackage\\subpackage directory, causing problems when running the java command, resulting in the error:\n\n```plaintext\nException in thread \"main\" java.lang.NoClassDefFoundError: subpackage/Test\n```\n\nRunning either of the following commands fixes the problem:\n\n```shell\najc -d . subpackage\\Test.java\n```", "EB": "The expected behavior is that when compiling classes from a subpackage using ajc, the resulting class file should be placed in the correct directory, i.e., `subpackage`, and the java command should run without any errors.", "SR": "To reproduce the issue, follow these steps:\n\n1. Create a new class in a subpackage.\n2. Compile the class using the command `ajc subpackage\\Test.java`.\n3. Attempt to run the compiled class using the java command, e.g., `java subpackage.Test`.\n4. Observe the `NoClassDefFoundError` error.\n5. Run the command `ajc -d . subpackage\\Test.java`.\n6. Attempt to run the compiled class using the java command again.\n7. Notice that the class runs without any errors."}