{"id": "38131", "title": "Bug 38131ajc needs d . option while correctly compiling classes from subpackage", "description": "Bug 38131ajc needs d . I am using 1.1rc1. This is a regression since rc1 and a deviation from javac. I am guessing this may have to do something with a change in the underlying Eclipse compiler.\n\nCreate a class in a subpackage such as:\n\npackage subpackage;\n\npublic class Test {\n\n    public static void main(String[] args) {\n        System.out.println(\"Hello\");\n    }\n\n}\n\nThen compile using the following command: ajc subpackage\\Test.java.\n\nYou will see a directory \"subpackage\" created under the existing \"subpackage\" directory. Running the java command results in the following exception:\n\nException in thread \"main\" java.lang.NoClassDefFoundError: subpackage/Test.\n\nRunning either of the following commands fixes the problem: ajc -d .", "OB": "The test.class is then put in the subpackage\\subpackage directory.", "EB": "The 'ajc' compiler should correctly compile classes from a subpackage and put the generated 'test.class' file in the appropriate directory.", "SR": "To reproduce:\n\n1. Create a class in a subpackage.\n2. Compile the class using the command: 'ajc subpackage\\Test.java'.\n3. Check if the 'test.class' file is placed in the subpackage\\subpackage directory.\n4. Try running the compiled class using the 'java' command and observe the exception.\n5. Compile the class again using the command: 'ajc -d .' and check if the issue is resolved."}