{"id": "38131", "title": "Bug 38131ajc needs d . option while correctly compiling classes from subpackage", "description": "Bug 38131ajc needs d . I am using 1.1rc1. This is a regression since rc1 and a deviation from javac.I am guessing this may have to do something with change in the underlyingEclipse compiler.Create a class in a subpackage such as:package subpackage;public class Test {public static void main(String[] args) {System.out.println(\"Hello\");}}Then compile using following command: ajc subpackage\\Test.javaYou will see a directory \"subpackage\" created under the existing \"subpackage\"directory. subpackage\\Test.javaor javac subpackage\\Test.javaNo big deal, really. ", "OB": "When compiling a Java class using the 'ajc' command in a subpackage, a new directory named 'subpackage' is created within the existing 'subpackage' directory. The compiled 'test.class' file is placed into this new 'subpackage' directory.", "EB": "The 'ajc' command should compile the Java class and place the 'test.class' file directly in the existing 'subpackage' directory, without creating a new 'subpackage' directory.", "SR": "To reproduce the issue, follow these steps:\n1. Create a Java class in a subpackage.\n2. Run the 'ajc' command to compile the class.\n3. Check if a new directory named 'subpackage' is created within the existing 'subpackage' directory, and if the compiled 'test.class' file is placed in this new directory.\n4. Compare this behavior with the 'javac' command, which should compile the class and place the 'test.class' file directly in the existing 'subpackage' directory without creating a new directory."}