{"id": "49235", "title": "Bug 49235: ServletContainerInitializer onStartup(Set<Class<? classSet is not expecting classes", "description": "Bug 49235: ServletContainerInitializer onStartup(Set<Class<? classSet is not expecting classes. The output is \"MySomeClass\".", "OB": "When I build Tomcat 7.0.0 from svn r939221, the code snippet provided below:\n\n@MySomeAnn\npublic class MySomeClass {...}\n\n@HandlesTypes(MySomeAnn.class)\npublic class ModuleInitializer implements ServletContainerInitializer {\n    @Override\n    public void onStartup(Set<Class<?>> classSet, ServletContext ctx) throws ServletException {\n        for (Class<?> targetClass : classSet) {\n            System.out.println(targetClass.getName());\n        }\n    }\n}\n\nOutputs \"MySomeAnn\" instead of the expected \"MySomeClass\".", "EB": "The classSet parameter in the onStartup() method of the ModuleInitializer class should print the names of all classes annotated with MySomeAnn, which should include \"MySomeClass\".", "SR": "To reproduce the issue:\n1. Build Tomcat 7.0.0 from svn r939221.\n2. Run the provided code snippet with an application containing a class annotated with @MySomeAnn, such as MySomeClass.\n3. Check the console output, it should display the name of the annotated class as \"MySomeClass\"."}