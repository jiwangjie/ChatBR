{"id": "38131", "title": "Bug 38131: ajc needs -d option while correctly compiling classes from subpackage", "description": "I am using 1.1rc1. This is a regression since rc1 and a deviation from javac. I am guessing this may have something to do with a change in the underlying Eclipse compiler.\n\nTo reproduce the issue, follow these steps:\n\n1. Create a class in a subpackage such as:\n\n   package subpackage;\n\n   public class Test {\n\n       public static void main(String[] args) {\n           System.out.println('Hello');\n       }\n\n   }\n\n2. Compile the class using the following command:\n\n    ajc subpackage\\Test.java\n\n3. Observe that a directory named 'subpackage' is created under the existing 'subpackage' directory. The compiled 'Test.class' file is placed in this new 'subpackage' directory.\n\n   Running the java command results in the following exception:\n\n    Exception in thread 'main' java.lang.NoClassDefFoundError: subpackage/Test\n\n4. To fix the problem, running either of the following commands resolves the issue:\n\n    ajc -d . subpackage\\Test.java", "OB": "Running the ajc command without the -d option results in the 'Test.class' file being put in the subpackage\\subpackage directory, causing the java command to fail with a NoClassDefFoundError.", "EB": "The 'Test.class' file should be created in the 'subpackage' directory instead of the 'subpackage\\subpackage' directory when compiling using the ajc command without the -d option.", "SR": "Add the -d option when running the ajc command to ensure that classes are correctly compiled from subpackages."}