{"id": "38131", "title": "Bug 38131: ajc needs -d option while correctly compiling classes from a subpackage", "description": "Bug 38131: ajc needs -d option while correctly compiling classes from a subpackage. I am using version 1.1rc1. This behavior is a regression since rc1 and deviates from javac. I suspect it may be related to a change in the underlying Eclipse compiler.\n\nTo reproduce the issue, follow these steps:\n1. Create a class in a subpackage, for example:\n\n   package subpackage;\n\n   public class Test {\n       public static void main(String[] args) {\n           System.out.println(\"Hello\");\n       }\n   }\n\n2. Compile the class using the following command: ajc subpackage\\Test.java\n\nObserved Behavior:\n- The test.class file is placed in a new \"subpackage\" directory under the existing \"subpackage\" directory.\n- Running the java command results in the following error:\n  Exception in thread \"main\" java.lang.NoClassDefFoundError: subpackage/Test\n\nExpected Behavior:\n- The compiled class should be generated in the same directory structure as javac.\n\nSuggested Resolution:\n- Add the -d option to the ajc command to specify the output directory.\n\nNote: Running the following command fixes the problem: ajc -d .", "OB": "The test.class file is placed in a new \"subpackage\" directory under the existing \"subpackage\" directory.\nRunning the java command results in the following error:\nException in thread \"main\" java.lang.NoClassDefFoundError: subpackage/Test", "EB": "But it will be nice to have the same behavior as javac.", "SR": "To reproduce the issue, follow these steps:\n1. Create a class in a subpackage, for example:\n\n   package subpackage;\n\n   public class Test {\n       public static void main(String[] args) {\n           System.out.println(\"Hello\");\n       }\n   }\n\n2. Compile the class using the following command: ajc -d . subpackage\\Test.java"}