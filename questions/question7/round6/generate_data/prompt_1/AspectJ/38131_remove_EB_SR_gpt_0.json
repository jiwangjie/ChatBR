{"id": "38131", "title": "Bug 38131ajc needs d . option while correctly compiling classes from subpackage",
  "description": "Bug 38131ajc needs d . I am using 1.1rc1. This is a regression since rc1 and a deviation from javac.I am guessing this may have to do something with change in the underlyingEclipse compiler.Create a class in a subpackage such as:package subpackage;public class Test {public static void main(String[] args) {System.out.println(\"Hello\");}}Then compile using following command: ajc subpackage\\Test.java.You will see a directory \"subpackage\" created under the existing \"subpackage\"directory. subpackage\\Test.javaor javac subpackage\\Test.java.No big deal, really.", "OB": "When using ajc to compile a class in a subpackage, the compiled test.class file is put in the subpackage\\subpackage directory. As a result, running the java command on the compiled class leads to an exception: \"Exception in thread \"main\" java.lang.NoClassDefFoundError: subpackage/Test\". However, running the command ajc d . or ajc -d . fixes this issue.",
  "EB": "The underlying Eclipse compiler in version 1.1rc1 introduced a regression where ajc does not handle compilation of classes in subpackages correctly.", "SR": "The issue can be resolved by making a change to the ajc compiler to handle classes in subpackages correctly, or by providing a workaround in the form of a flag (such as '-d .') that users can use to ensure the compiled classes are placed in the correct location."}