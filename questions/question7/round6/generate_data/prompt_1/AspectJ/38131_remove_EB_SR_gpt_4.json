{
  "id": "38131",
  "title": "Bug 38131: ajc needs -d option while correctly compiling classes from subpackage",
  "description": "Bug 38131: ajc needs -d option. I am using 1.1rc1. This is a regression since rc1 and a deviation from javac. I am guessing this may have to do something with a change in the underlying Eclipse compiler. Create a class in a subpackage such as:\n\npackage subpackage;\n\npublic class Test {\n\n  public static void main(String[] args) {\n    System.out.println(\"Hello\");\n  }\n}\n\nThen compile using the following command: ajc subpackage\\Test.java\n\nYou will see a directory \"subpackage\" created under the existing \"subpackage\" directory. subpackage\\Test.java or javac subpackage\\Test.java. No big deal, really.",
  "OB": "When compiling with ajc, the test.class is then put in subpackage\\subpackage directory. This means running the java command results in:\n\nException in thread \"main\" java.lang.NoClassDefFoundError: subpackage/Test.\n\nRunning either of the following commands fixes the problem: ajc -d .",
  "EB": "The expected behavior is that when compiling with ajc, the test.class should be placed in the subpackage directory, and running the java command should not result in any errors. This can be achieved by using the ajc -d option.",
  "SR": "1. Create a class in a subpackage as described in the bug report.\n2. Compile the class using the command: ajc subpackage\\Test.java.\n3. Observe the creation of the \"subpackage\" directory.\n4. Attempt to run the compiled class using the java command.\n5. Note the occurrence of the exception mentioned in the bug report.\n6. Fix the issue by recompiling with the command: ajc -d ."
}
