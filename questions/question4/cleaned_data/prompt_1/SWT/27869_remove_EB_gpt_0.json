{"id": "27869", "title": "StyledText overuse of Font.getFontData and performance issue", "description": "The StyledText in Eclipse is overusing the Font.getFontData API, specifically when typing in the Java Editor or scrolling and selecting text. This API is being called multiple times for a single key stroke and results in a high number of FontData being loaded. In addition, the FontMetrics API is also heavily used by the StyledText. It is suggested that the metric information should be cached in the StyledText and only updated when the font is changed. This issue is particularly concerning in platforms such as Motif running on UTF8, where the performance of the Font.getFontData method is significantly poorer compared to Windows.", "OB": "When running Eclipse and using the Java Editor, a single key stroke triggers the Font.getFontData() API to be called 13 times. This excessive usage of the API is also observed during scrolling and text selection in the StyledText. Each Font has 7 FontData, so for every 'a' typed in the Java Editor, 91 (713) FontData will be loaded.", "EB": "It is recommended to optimize the usage of the Font.getFontData API in the StyledText, particularly when typing, scrolling, and selecting text. Consider caching the metric information in the StyledText and updating it only when the font is changed.", "SR": "To investigate the performance concerns related to the Font.getFontData method, add a 'System.out.println' statement at the beginning of the method and run a self-hosted Eclipse. Monitor the console output to observe the method's performance. Also, pay attention to the performance impact on platforms such as Motif running on UTF8."}