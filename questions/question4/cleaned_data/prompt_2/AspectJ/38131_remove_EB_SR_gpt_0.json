{"id": "38131", "title": "Bug 38131: ajc needs -d option while correctly compiling classes from a subpackage", "description": "I am using ajc 1.1rc1. This is a regression since rc1 and a deviation from javac. I am guessing this may have something to do with a change in the underlying Eclipse compiler.\n\nTo reproduce the bug:\n1. Create a class in a subpackage like this:\n   package subpackage;\n\n   public class Test {\n       public static void main(String[] args) {\n           System.out.println(\"Hello\");\n       }\n   }\n\n2. Compile the class using the following command:\n   ajc subpackage\\Test.java\n\nExpected behavior: The test.class file should be put in the subpackage\\subpackage directory.\n\nActual behavior: A new subpackage directory is created within the existing subpackage directory, resulting in the java command throwing the exception:\n   Exception in thread \"main\" java.lang.NoClassDefFoundError: subpackage/Test\n\nA workaround for this problem is to run either of the following commands after ajc compiles the class:\n   ajc -d . subpackage\\Test.java\n   javac subpackage\\Test.java\n\nThis will fix the problem.", "OB": "The test.class file is then put in the subpackage\\subpackage directory. Running the java command results in an exception:\n   Exception in thread \"main\" java.lang.NoClassDefFoundError: subpackage/Test\n\nThis issue can be resolved by running either of the following commands after compiling with ajc:\n   ajc -d .\n   javac subpackage\\Test.java\n\nThis will create the necessary subpackage directory under the existing subpackage directory and fix the problem.", "EB": "", "SR": ""}