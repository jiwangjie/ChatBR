{"id": "22360", "title": "Bug 22360 - FontRegistry cannot be instantiated using resources outside org.eclipse.jface.resource", "description": "FontRegistry cannot be instantiated using resources outside the org.eclipse.jface.resource package. Currently, the FontRegistry class only looks up resources relative to its own package location. This issue could be resolved by modifying the FontRegistry constructor to accept a client class (or class loader) as an additional parameter.\n\nI encountered a MissingResourceException when attempting to create a FontRegistry instance for my application using the following code:\n\ncom.company.product.MyClass\npublic void createFontRegistry(){\n    FontRegistry fonts = new FontRegistry(\"com.company.product.fonts\");\n}\n\nI have a file named fonts.properties in the com/company/product/ folder, but the exception is thrown. However, if I use the following code instead:\n\ncom.company.product.MyClass\npublic void createFontRegistry(){\n    ResourceBundle fonts = ResourceBundle.getBundle(\"com.company.product.fonts\");\n}\n\nNo exception is thrown. Additionally, if I create a copy of the FontRegistry class in my com.company.product package, it works.\n\nI suspect that this is a bug in the FontRegistry. It attempts to load the fonts resource bundle, but only uses its own class loader to do so (see the readResourceBundle(String) method in FontRegistry).", "OB": "When trying to create a FontRegistry instance using resources outside the org.eclipse.jface.resource package, a MissingResourceException is thrown. The FontRegistry only looks up resources relative to its own package location.", "EB": "Modifying the FontRegistry constructor to accept a client class (or class loader) as an additional parameter would allow clients to load their own resource bundle.", "SR": ""}