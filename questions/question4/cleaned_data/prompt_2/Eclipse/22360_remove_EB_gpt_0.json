{"id": "22360", "title": "Bug 22360[Fonts] FontRegistry can not be instantiated using resources outside org.eclipse.jface.resource", "description": "Bug 22360[Fonts] FontRegistry can not be instantiated using resources outside org.eclipse.jface.resource. Therefore, all the resources that are being looked up are the only ones relative to the location of the FontRegistry class in the org.eclipse.jface.resource path. It can be remedied if FontRegistry took a client class (or class loader) as an additional parameter to the constructor.", "OB": "I am getting a MissingResourceException when I try to create a FontRegistry instance for my application using the following code:\n\ncom.company.product.MyClass\npublic void createFontRegistry(){\n    FontRegistry fonts = new FontRegistry(\"com.company.product.fonts\");\n}\n\nI have a file named fonts.properties in the com/company/product/ folder. However, if I try the following code instead:\n\ncom.company.product.MyClass\npublic void createFontRegistry(){\n    ResourceBundle fonts = ResourceBundle.getBundle(\"com.company.product.fonts\");\n}\n\nThere is no exception. Furthermore, if I create a complete copy of the FontRegistry class in my com.company.product package, then it works. Based on my observation, it seems to be a bug in the FontRegistry. It tries to load the fonts resource bundle, but it uses the FontRegistry's class loader to do that (see the readResourceBundle(String) method in the FontRegistry class).", "EB": "", "SR": "The FontRegistry class cannot be instantiated using resources outside of org.eclipse.jface.resource, leading to a MissingResourceException. To reproduce the issue, run the code \n\ncom.company.product.MyClass\npublic void createFontRegistry(){\n    FontRegistry fonts = new FontRegistry(\"com.company.product.fonts\");\n}\n\nMake sure that there is a file named fonts.properties in the com/company/product/ folder. To work around this issue, you can use the code\n\ncom.company.product.MyClass\npublic void createFontRegistry(){\n    ResourceBundle fonts = ResourceBundle.getBundle(\"com.company.product.fonts\");\n}\n\nwhich does not throw any exceptions. A possible solution for this bug could be to modify the FontRegistry constructor to include a client class or class loader as an additional parameter. This would allow loading resources outside of the org.eclipse.jface.resource path."}